using Libdl

@static if haskey(ENV,"JULIA_PETSC_LIBRARY") && !isempty(rstrip(ENV["JULIA_PETSC_LIBRARY"]))

  @info """ Non-empty JULIA_PETSC_LIBRARY environment variable found.
  Trying to use the PETSc installation it points to.
  JULIA_PETSC_LIBRARY=$(ENV["JULIA_PETSC_LIBRARY"])
  """
  flags = Libdl.RTLD_LAZY | Libdl.RTLD_DEEPBIND | Libdl.RTLD_GLOBAL
  libpetsc_found = true
  libpetsc_provider = "JULIA_PETSC_LIBRARY"
  libpetsc_path = ENV["JULIA_PETSC_LIBRARY"]
  libpetsc_handle = Ref(Libdl.dlopen(libpetsc_path, flags))

else

  @info """ Non-empty JULIA_PETSC_LIBRARY environment variable NOT found.
  Trying to use the PETSc installation provided by PETSc_jll.
  """
  using PETSc_jll
  libpetsc_found = true
  libpetsc_provider = "PETSc_jll"
  libpetsc_path = PETSc_jll.libpetsc_path
  libpetsc_handle = Ref(PETSc_jll.libpetsc_handle)

end

include(joinpath(@__DIR__,"..","src","Config.jl"))

real_type = Ref{PetscDataType}()
real_found = Ref{PetscBool}()
real_size = Ref{Csize_t}()
real_msg = "Could not determine PetscReal datatype."
@check_error_code PetscDataTypeFromString("Real",real_type,real_found)
if real_found[] == PETSC_FALSE
  @error real_msg
end
@check_error_code PetscDataTypeGetSize(real_type[],real_size)
if real_type[] == PETSC_DOUBLE &&  real_size[] == 8
  PetscReal = Float64
elseif real_type[] == PETSC_DOUBLE &&  real_size[] == 4
  PetscReal = Float32
else
  @error real_msg
end

scalar_type = Ref{PetscDataType}()
scalar_found = Ref{PetscBool}()
scalar_size = Ref{Csize_t}()
scalar_msg = "Could not determine PetscScalar datatype."
@check_error_code PetscDataTypeFromString("Scalar",scalar_type,scalar_found)
if scalar_found[] == PETSC_FALSE
  @error scalar_msg
end
@check_error_code PetscDataTypeGetSize(scalar_type[],scalar_size)
if scalar_type[] == PETSC_DOUBLE &&  scalar_size[] == 8
  PetscScalar = Float64
elseif scalar_type[] == PETSC_DOUBLE &&  scalar_size[] == 4
  PetscScalar = Float32
elseif scalar_type[] == PETSC_COMPLEX &&  scalar_size[] == 16
  PetscScalar = ComplexF64
else
  @error scalar_msg
end


int_type = Ref{PetscDataType}()
int_found = Ref{PetscBool}()
int_size = Ref{Csize_t}()
int_msg = "Could not determine PetscInt datatype."
@check_error_code PetscDataTypeFromString("Int",int_type,int_found)
if int_found[] == PETSC_FALSE
  @error int_msg
end
@check_error_code PetscDataTypeGetSize(int_type[],int_size)
if int_type[] in (PETSC_INT, PETSC_DATATYPE_UNKNOWN) &&  int_size[] == 8
  PetscInt = Int64
elseif int_type[] in (PETSC_INT, PETSC_DATATYPE_UNKNOWN) &&  int_size[] == 4
  PetscInt = Int32
else
  @error int_msg
end

@info """
PETSc configuration summary:
libpetsc_provider = $(libpetsc_provider)
libpetsc_path     = $(libpetsc_path)
PetscReal         = $(PetscReal)
PetscScalar       = $(PetscScalar)
PetscInt          = $(PetscInt)
"""
open(joinpath(@__DIR__,"deps.jl"),"w") do f
  println(f, "# This file is automatically generated at build-time.")
  println(f, "# Do not edit")
  println(f)
  println(f,:(const libpetsc_found = $(libpetsc_found)))
  println(f,:(const libpetsc_provider = $(libpetsc_provider)))
  println(f,:(const libpetsc_path = $(libpetsc_path)))
end

open(joinpath(@__DIR__,"PetscDataTypes.jl"),"w") do f
  println(f, "# This file is automatically generated at build-time.")
  println(f, "# Do not edit.")
  println(f, "# File generated for $(libpetsc_path)")
  println(f)
  println(f,:("\"\"\""))
  println(f, "Julia alias for `PetscReal` C type.\n")
  println(f, "See [PETSc manual](https://www.mcs.anl.gov/petsc/petsc-current/docs/manualpages/Sys/PetscReal.html).")
  println(f,:("\"\"\""))
  println(f,:(const PetscReal = $(PetscReal)))
  println(f)
  println(f,:("\"\"\""))
  println(f, "Julia alias for `PetscScalar` C type.\n")
  println(f, "See [PETSc manual](https://www.mcs.anl.gov/petsc/petsc-current/docs/manualpages/Sys/PetscScalar.html).")
  println(f,:("\"\"\""))
  println(f,:(const PetscScalar = $(PetscScalar)))
  println(f)
  println(f,:("\"\"\""))
  println(f, "Julia alias for `PetscInt` C type.\n")
  println(f, "See [PETSc manual](https://www.mcs.anl.gov/petsc/petsc-current/docs/manualpages/Sys/PetscInt.html).")
  println(f,:("\"\"\""))
  println(f,:(const PetscInt = $(PetscInt)))
end

