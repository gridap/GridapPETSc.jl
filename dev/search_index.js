var documenterSearchIndex = {"docs":
[{"location":"#GridapPETSc.jl","page":"Home","title":"GridapPETSc.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GridapPETSc]","category":"page"},{"location":"#GridapPETSc.Finalize-Tuple{}","page":"Home","title":"GridapPETSc.Finalize","text":"function Finalize()\n\nFinalize Petsc library.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.Init-Tuple{Any}","page":"Home","title":"GridapPETSc.Init","text":"function Init(args)\n\nInitialize Petsc library.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.Init-Tuple{Array{String,1},String,String}","page":"Home","title":"GridapPETSc.Init","text":"function Init(args::Vector{String}, filename::String, help::String)\n\nInitialize Petsc library.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.Init-Tuple{}","page":"Home","title":"GridapPETSc.Init","text":"function Init()\n\nInitialize Petsc library.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.KSPCreate!-Tuple{MPI.Comm,GridapPETSc.PetscKSP}","page":"Home","title":"GridapPETSc.KSPCreate!","text":"function KSPCreate!(comm::MPI.Comm, ksp::PetscKSP)\n\nCreates the default KSP context.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.KSPCreate-Tuple{MPI.Comm}","page":"Home","title":"GridapPETSc.KSPCreate","text":"function KSPCreate(comm::MPI.Comm)\n\nReturns the default KSP context.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.KSPDestroy!-Tuple{GridapPETSc.PetscKSP}","page":"Home","title":"GridapPETSc.KSPDestroy!","text":"function KSPDestroy!(ksp::PetscKSP)\n\nDestroys KSP context.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.KSPGetIterationNumber!-Tuple{GridapPETSc.PetscKSP}","page":"Home","title":"GridapPETSc.KSPGetIterationNumber!","text":"function KSPGetIterationNumber!(ksp::PetscKSP, its::Integer)\n\nGets the current iteration number; if the KSPSolve() is complete, returns the number of iterations used.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.KSPSetFromOptions!-Tuple{GridapPETSc.PetscKSP}","page":"Home","title":"GridapPETSc.KSPSetFromOptions!","text":"function KSPSetFromOptions!(ksp::PetscKSP)\n\nSets KSP options from the options database.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.KSPSetOperators!-Tuple{GridapPETSc.PetscKSP,GridapPETSc.PetscMat,GridapPETSc.PetscMat}","page":"Home","title":"GridapPETSc.KSPSetOperators!","text":"function KSPSetOperators!(ksp::PetscKSP, A::PetscMat, P:: PetscMat)\n\nSets the matrix associated with the linear system and a (possibly) different one associated with the preconditioner.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.KSPSetTolerances!-Tuple{GridapPETSc.PetscKSP,AbstractFloat,AbstractFloat,AbstractFloat,Integer}","page":"Home","title":"GridapPETSc.KSPSetTolerances!","text":"function KSPSetOperators!(ksp::PetscKSP, A::PetscMat, P:: PetscMat)\n\nSets the matrix associated with the linear system and a (possibly) different one associated with the preconditioner.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.KSPSetUp!-Tuple{GridapPETSc.PetscKSP}","page":"Home","title":"GridapPETSc.KSPSetUp!","text":"function KSPSetUp!(ksp::PetscKSP)\n\nSets up the internal data structures for the later use of an iterative solver.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.KSPSolve!-Tuple{GridapPETSc.PetscKSP,GridapPETSc.PetscVec,GridapPETSc.PetscVec}","page":"Home","title":"GridapPETSc.KSPSolve!","text":"function KSPSolve!(ksp::PetscKSP, b::PetscVec, x::PetscVec)\n\nSolves linear system.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.KSPSolveTranspose!-Tuple{Ptr{Nothing},AbstractArray,AbstractArray}","page":"Home","title":"GridapPETSc.KSPSolveTranspose!","text":"function KSPSolveTranspose!(arg1::Ptr{Cvoid}, arg2::AbstractArray, arg3::AbstractArray)\n\nSolves the transpose of a linear system.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.MatCreateSeqAIJWithArrays!-Tuple{MPI.Comm,Int64,Int64,Array{Int32,1},Array{Int32,1},Array{Float64,1},GridapPETSc.PetscMat}","page":"Home","title":"GridapPETSc.MatCreateSeqAIJWithArrays!","text":"function  MatCreateSeqAIJWithArrays!(\n    comm::MPI.Comm,\n    m::Int,\n    n::Int,\n    i::Vector{PetscInt},\n    j::Vector{PetscInt},\n    a::Vector{PetscScalar},\n    mat::PetscMat)\n\nCreates a sequential AIJ matrix using matrix elements (in CSR format) provided by the user.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.MatCreateSeqAIJWithArrays-Tuple{MPI.Comm,Int64,Int64,Array{Int32,1},Array{Int32,1},Array{Float64,1}}","page":"Home","title":"GridapPETSc.MatCreateSeqAIJWithArrays","text":"function  MatCreateSeqAIJWithArrays(\n    comm::MPI.Comm,\n    m::Int,\n    n::Int,\n    i::Vector{PetscInt},\n    j::Vector{PetscInt},\n    a::Vector{PetscScalar})\n\nReturns a sequential AIJ matrix using matrix elements (in CSR format) provided by the user.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.MatCreateSeqBAIJWithArrays!-Tuple{MPI.Comm,Int64,Int64,Int64,Array{Int32,1},Array{Int32,1},Array{Float64,1},GridapPETSc.PetscMat}","page":"Home","title":"GridapPETSc.MatCreateSeqBAIJWithArrays!","text":"function  MatCreateSeqBAIJWithArrays!(\n    comm::MPI.Comm,\n    bs::Int,\n    m::Int,\n    n::Int,\n    i::Vector{PetscInt},\n    j::Vector{PetscInt},\n    a::Vector{PetscScalar},\n    mat::PetscMat)\n\nCreates a sequential block AIJ matrix using matrix elements (in CSR format) provided by the user.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.MatCreateSeqBAIJWithArrays-Tuple{MPI.Comm,Int64,Int64,Int64,Array{Int32,1},Array{Int32,1},Array{Float64,1}}","page":"Home","title":"GridapPETSc.MatCreateSeqBAIJWithArrays","text":"function  MatCreateSeqBAIJWithArrays(\n    comm::MPI.Comm,\n    bs::Int,\n    m::Int,\n    n::Int,\n    i::Vector{PetscInt},\n    j::Vector{PetscInt},\n    a::Vector{PetscScalar})\n\nReturns a sequential block AIJ matrix using matrix elements (in CSR format) provided by the user.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.MatCreateSeqSBAIJWithArrays!-Tuple{MPI.Comm,Int64,Int64,Int64,Array{Int32,1},Array{Int32,1},Array{Float64,1},GridapPETSc.PetscMat}","page":"Home","title":"GridapPETSc.MatCreateSeqSBAIJWithArrays!","text":"function  MatCreateSeqSBAIJWithArrays!(\n    comm::MPI.Comm,\n    bs::Int,\n    m::Int,\n    n::Int,\n    i::Vector{PetscInt},\n    j::Vector{PetscInt},\n    a::Vector{PetscScalar},\n    mat::PetscMat)\n\nCreates a sequential symmetric block AIJ matrix using matrix elements (in CSR format) provided by the user.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.MatCreateSeqSBAIJWithArrays-Tuple{MPI.Comm,Int64,Int64,Int64,Array{Int32,1},Array{Int32,1},Array{Float64,1}}","page":"Home","title":"GridapPETSc.MatCreateSeqSBAIJWithArrays","text":"function  MatCreateSeqSBAIJWithArrays(\n    comm::MPI.Comm,\n    bs::Int,\n    m::Int,\n    n::Int,\n    i::Vector{PetscInt},\n    j::Vector{PetscInt},\n    a::Vector{PetscScalar})\n\nReturns a sequential symmetric block AIJ matrix using matrix elements (in CSR format) provided by the user.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.MatDestroy!-Tuple{GridapPETSc.PetscMat}","page":"Home","title":"GridapPETSc.MatDestroy!","text":"function MatDestroy!(mat::PetscMat)\n\nFrees space taken by a matrix.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.MatEqual-Tuple{GridapPETSc.PetscMat,GridapPETSc.PetscMat}","page":"Home","title":"GridapPETSc.MatEqual","text":"function MatEqual!(A::PetscMat, B::PetscMat)\n\nCompare two matrices.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.MatGetSize-Tuple{GridapPETSc.PetscMat}","page":"Home","title":"GridapPETSc.MatGetSize","text":"function MatGetSize(A::PetscMat)\n\nReturns the numbers of rows and columns in a matrix.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.MatView","page":"Home","title":"GridapPETSc.MatView","text":"function MatView(mat::PetscMat, viewer::PetscViewer=C_NULL)\n\nVisualizes a matrix object.\n\n\n\n\n\n","category":"function"},{"location":"#GridapPETSc.PetscFinalize!-Tuple{}","page":"Home","title":"GridapPETSc.PetscFinalize!","text":"function PetscFinalize!()\n\nChecks for options to be called at the conclusion of the program.  MPIFinalize() is called only if the user had not called MPIInit()  before calling PetscInitialize(). \n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.PetscFinalized-Tuple{}","page":"Home","title":"GridapPETSc.PetscFinalized","text":"function PetscFinalized()\n\nDetermine whether PetscFinalize() has been called yet \n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.PetscInitializeNoArguments!-Tuple{}","page":"Home","title":"GridapPETSc.PetscInitializeNoArguments!","text":"function PetscInitializeNoArguments!()\n\nCalls PetscInitialize() without the command line arguments. \n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.PetscInitializeNoPointers!-Tuple{Array{String,1},String,String}","page":"Home","title":"GridapPETSc.PetscInitializeNoPointers!","text":"function PetscInitializeNoPointers!(args::Vector{String}, filename::String, help::String)\n\nCalls PetscInitialize() without the pointers to argc and args. This is called only by the PETSc Julia interface.  Even though it might start MPI it sets the flag to indicate that it did NOT start MPI so that the PetscFinalize()  does not end MPI, thus allowing PetscInitialize() to be called multiple times from Julia without the problem  of trying to initialize MPI more than once.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.PetscInitialized-Tuple{}","page":"Home","title":"GridapPETSc.PetscInitialized","text":"function PetscInitialized()\n\nDetermine whether PETSc is initialized. \n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.VecCreateSeqWithArray!-Tuple{MPI.Comm,Int64,Int64,Array{Float64,1},GridapPETSc.PetscVec}","page":"Home","title":"GridapPETSc.VecCreateSeqWithArray!","text":"function VecCreateSeqWithArray!(\n    comm::MPI.Comm,\n    bs::Int,\n    n::Int,\n    array::Vector{PetscScalar},\n    vec::PetscVec)\n\nCreates a standard, sequential array-style vector,  where the user provides the array space to store the vector values. \n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.VecCreateSeqWithArray-Tuple{MPI.Comm,Int64,Int64,Array{Float64,1}}","page":"Home","title":"GridapPETSc.VecCreateSeqWithArray","text":"function VecCreateSeqWithArray(\n    comm::MPI.Comm,\n    bs::Int,\n    n::Int,\n    array::Vector{PetscScalar})\n\nReturns a standard, sequential array-style vector,  where the user provides the array space to store the vector values. \n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.VecDestroy!-Tuple{GridapPETSc.PetscVec}","page":"Home","title":"GridapPETSc.VecDestroy!","text":"function VecDestroy!(vec::PetscVec)\n\nDestroys a vector. \n\n\n\n\n\n","category":"method"},{"location":"#GridapPETSc.VecView","page":"Home","title":"GridapPETSc.VecView","text":"function VecView(vec::PetscVec, viewer::PetscViewer=C_NULL)\n\nViews a vector object. \n\n\n\n\n\n","category":"function"}]
}
